
<style>
.analysis-table {
    display:block flexbox;
    flex-direction: column;
    width: 70%;
    height: 70vh;
    border-collapse: collapse;
    margin-top: 16px;
}

.analysis-table th, .analysis-table td {
    padding: 12px;
    border: 1px solid #ffffff;
    text-align: center;
}

.analysis-table th {
    background-color: #666000;
    color: #000000;
}

.compare-table th {
    text-align: center;
    background-color: #666000;
    color: #ffffff;
}

.compare-table td {
    padding: 5px;
}
</style>


@page "/compare-plans"
@using ASP.Models
@attribute [StreamRendering]
@inject ASP.Data.PlansDbContext _dbContext
@inject PlanService PlanService
@inject ASP.Data.PlansDbContext _dbContext

<PageTitle>Compare Plans</PageTitle>

<h1>Compare your plans</h1>
<p><i>Compare your abominations</i></p>


<!-- Plans List with Selection Checkboxes -->
<FluentDataGrid Id="planGrid" Items="@((curPlan ?? new List<listOfPlans>()).AsQueryable())" GridTemplateColumns="0.7fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr"               Loading="@(curPlan == null)" Style="height: 304px;" TGridItem="listOfPlans">


        
    <TemplateColumn Title="Select">
        <ChildContent>
            <FluentCheckbox Checked="@IsPlanSelected(context.Id)"
                            @onchange="@(e => TogglePlanSelection(context.Id))" />
        </ChildContent>
    </TemplateColumn>


    <PropertyColumn Title="ID" Property="@(c => c!.Id)" Align="Align.Start"/>
    <PropertyColumn Title="Name" Property="@(c => c!.PlanName)" Align="Align.Start"/>
    <PropertyColumn Title="Scenario" Property="@(c => c!.Scenario)" Align="Align.Start"/>
    <PropertyColumn Title="Shelter" Property="@(c => c!.Shelter)" Align="Align.Center"/>
    <PropertyColumn Title="Food" Property="@(c => c!.FoodSources)" Align="Align.Center"/> 
    <PropertyColumn Title="Water" Property="@(c => c!.WaterSources)" Align="Align.Center"/>
    <PropertyColumn Title="Weapons" Property="@(c => c!.Weapons)" Align="Align.End"/>
    <PropertyColumn Title="Vehicles" Property="@(c => c!.Vehicles)" Align="Align.End"/>  
    <PropertyColumn Title="Fuel" Property="@(c => c!.Fuel)" Align="Align.End"/>
</FluentDataGrid>

<!-- Compare Button -->
<FluentButton @onclick="CompareSelectedPlans" Disabled="@(selectedPlanIds.Count < 2)">
    Compare Selected Plans
</FluentButton>

<!-- Comparison Table (Only visible when 2+ plans are selected) -->
@if (selectedPlans.Count >= 2)
{
    <h2>Plan Comparison</h2>
    
    <!-- Basic Attributes Comparison -->
    <h3>Basic Attributes</h3>
    <table class="compare-table">
        <thead>
            <tr>
                <th>Attribute</th>
                @foreach (var plan in selectedPlans)
                {
                    <th>@plan.PlanName</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var property in typeof(listOfPlans).GetProperties())
            {
                if (property.Name != "Id" && property.Name != "PlanName")
                {
                    <tr>
                        <td>@property.Name</td>
                        @foreach (var plan in selectedPlans)
                        {
                            <td>@property.GetValue(plan)?.ToString()</td>
                        }
                    </tr>
                }
            }
        </tbody>
    <!-- Survival Analysis -->
        <h3>Survival Analysis</h3>
        @if (selectedPlans.Count >= 2)
        {
            var bestPlan = DetermineBestPlan();
            <div style="margin-bottom: 50px;">
                <h4>Best Overall Plan: @bestPlan.PlanName</h4>
                <p>Based on survival capabilities analysis</p>
            </div>
        }
        <table class="compare-table">
            <thead>
                <tr>
                    <th>Situation</th>
                    @foreach (var plan in selectedPlans)
                    {
                        <th>
                            @plan.PlanName
                            @if (plan.Id == DetermineBestPlan().Id)
                            {
                                <span style="color: gold;"> ‚≠ê</span>
                            }
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr>
                    <th scope="row">üèôÔ∏è Urban Survival</th>
                    @foreach (var plan in selectedPlans)
                    {
                        <td>@RenderAnalysisBadge(AnalyzeUrbanSurvival(plan))</td>
                    }
                </tr>
                <tr>
                    <th scope="row">üå≤ Wilderness Survival</th>
                    @foreach (var plan in selectedPlans)
                    {
                        <td>@RenderAnalysisBadge(AnalyzeWildernessSurvival(plan))</td>
                    }
                </tr>
                <tr>
                    <th scope="row">üåæ Long-term Sustainability</th>
                    @foreach (var plan in selectedPlans)
                    {
                        <td>@RenderAnalysisBadge(AnalyzeLongTermSurvival(plan))</td>
                    }
                </tr>
            </tbody>
        </table>
    </table>
}

@code {
    private listOfPlans DetermineBestPlan()
    {
        var planScores = selectedPlans.Select(plan => new
        {
            Plan = plan,
            Score = CalculatePlanScore(plan)
        }).ToList();

        return planScores.OrderByDescending(x => x.Score).First().Plan;
    }

    private int CalculatePlanScore(listOfPlans plan)
    {
        int score = 0;
        
        // Urban survival scoring
        if (!string.IsNullOrEmpty(plan.Shelter) && plan.Shelter.ToLower().Contains("suburban house")) score += 2;
        if (!string.IsNullOrEmpty(plan.Vehicles) && (plan.Vehicles.Contains("Car") || plan.Vehicles.Contains("Helicopter"))) score += 2;
        if (!string.IsNullOrEmpty(plan.Weapons) && plan.Weapons.Contains("Firearm")) score += 2;

        // Wilderness survival scoring
        if (!string.IsNullOrEmpty(plan.WaterSources)) score += 2;
        if (!string.IsNullOrEmpty(plan.FoodSources) && 
            (plan.FoodSources.Contains("Farm") || plan.FoodSources.Contains("Hunting/Fishing"))) score += 2;

        // Long-term sustainability scoring
        if (!string.IsNullOrEmpty(plan.FoodSources) && plan.FoodSources.ToLower().Contains("farm")) score += 3;
        if (!string.IsNullOrEmpty(plan.WaterSources) && 
            (plan.WaterSources.Contains("Well") || plan.WaterSources.Contains("Reservoir"))) score += 3;

        return score;
    }

    private string RenderAnalysisBadge(string analysis)
    {
        return analysis;
    }

    private string AnalyzeUrbanSurvival(listOfPlans plan)
    {
        var analysis = new List<string>();
        
        if (!string.IsNullOrEmpty(plan.Shelter) && plan.Shelter.Contains("Metropolitan Apartment"))
            analysis.Add("Good urban shelter choice ");
        
        if (!string.IsNullOrEmpty(plan.Vehicles)  && (plan.Vehicles.Contains("Car") || plan.Vehicles.Contains("Helicopter")))
            analysis.Add("Mobile evacuation capable " );
            
        if (!string.IsNullOrEmpty(plan.Weapons) && plan.Weapons.Contains("Firearm"))
            analysis.Add("Has strong defense capabilities ");

        if (!string.IsNullOrEmpty(plan.Weapons) && !plan.Weapons.Contains("Firearm"))
        analysis.Add("No firearm in your plan may lead to your death ");
        return analysis.Count > 0 ? string.Join(", ", analysis) : "Weak urban survival capability";
    }

    private string AnalyzeWildernessSurvival(listOfPlans plan)
    {
        var analysis = new List<string>();
        
        if (!string.IsNullOrEmpty(plan.WaterSources) && plan.WaterSources.Contains("Reservoir") || plan.WaterSources.Contains("Well"))
            analysis.Add("Has water procurement");
            
        if (!string.IsNullOrEmpty(plan.FoodSources) && 
            (plan.FoodSources.Contains("Hunting/Fishing") || plan.FoodSources.Contains("Foraging")))
            analysis.Add("Can obtain wilderness food");

        return analysis.Count > 0 ? string.Join(", ", analysis) : "Limited wilderness survival capability";
    }

    private string AnalyzeLongTermSurvival(listOfPlans plan)
    {
        var analysis = new List<string>();
        
        if (!string.IsNullOrEmpty(plan.FoodSources) && 
            plan.FoodSources.ToLower().Contains("farm"))
            analysis.Add("Sustainable food source not bad");
            
        if (!string.IsNullOrEmpty(plan.WaterSources) && 
            (plan.WaterSources.ToLower().Contains("well") || plan.WaterSources.ToLower().Contains("purif")))
            analysis.Add("Reliable water source");

        return analysis.Count > 0 ? string.Join(", ", analysis) : "Poor long-term sustainability you will likely run out of food and water";
    }
}



@code {

    
    private List<Plan>? survivalPlans;
    private List<listOfPlans>? curPlan;
    private List<int> selectedPlanIds = new();
    private List<listOfPlans> selectedPlans = new();

    protected override async Task OnInitializedAsync()
    {
        survivalPlans = await PlanService.GetPlansAsync();
        await Task.Delay(500);

        curPlan = survivalPlans.Select(plan => new listOfPlans
        {
            Id = plan.Id,
            PlanName = plan.PlanName,
            Scenario = plan.Scenario,
            Shelter = plan.Shelter,
            FoodSources = plan.FoodSources,
            WaterSources = plan.WaterSources,
            Weapons = plan.Weapons,
            Vehicles = plan.Vehicles,
            Fuel = plan.Fuel
        }).ToList();
    }

    private bool IsPlanSelected(int planId) => selectedPlanIds.Contains(planId);

    private void TogglePlanSelection(int planId)
    {
        if (selectedPlanIds.Contains(planId))
        {
            selectedPlanIds.Remove(planId);
        }
        else if (selectedPlanIds.Count < 3) // Allow max 3 plans for comparison
        {
            selectedPlanIds.Add(planId);
        }
    }

    private void CompareSelectedPlans()
    {
        selectedPlans = curPlan.Where(p => selectedPlanIds.Contains(p.Id)).ToList();
    }

    private class listOfPlans
    {
        public int Id { get; set; }
        public string? PlanName { get; set; }
        public string? Scenario { get; set; }
        public string? Shelter { get; set; }
        public string? FoodSources { get; set; }
        public string? WaterSources { get; set; }
        public string? Weapons { get; set; }
        public string? Vehicles { get; set; }
        public string? Fuel { get; set; }
    }
}


