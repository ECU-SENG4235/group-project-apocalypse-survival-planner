@page "/my-plans"
@attribute [StreamRendering]
@using ASP.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject ASP.Data.PlansDbContext _dbContext
@inject PlanService PlanService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>

        .detail-section {
        margin: 20px 0;
        padding: 20px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
        border-left: 4px solid #ff4d4d;
        transition: all 0.3s ease;
    }

    .detail-section:hover {
        background: rgba(255, 255, 255, 0.08);
        transform: translateX(5px);
    }

    .resource-item {
        padding: 15px;
        border-radius: 8px;
        background: rgba(34, 34, 34, 0.6);
        margin-bottom: 10px;
    }

    .resource-icon {
        font-size: 24px;
        margin-right: 10px;
        color: #ff4d4d;
    }

    .shelter { border-left: 4px solid #4CAF50; }
    .food { border-left: 4px solid #FFC107; }
    .water { border-left: 4px solid #2196F3; }
    .weapons { border-left: 4px solid #FF5722; }
    .transport { border-left: 4px solid #9C27B0; }




    .plans-container {
        padding: 20px;
        background: linear-gradient(135deg, #1a1a1a, #2d2d2d);
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    .plan-card {
        cursor: pointer;
        margin: 10px;
        padding: 15px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
        transition: transform 0.2s;
    }

    .plan-card:hover {
        transform: translateY(-5px);
        background: rgba(255, 77, 77, 0.1);
    }

    .detail-view {
        padding: 20px;
        max-width: 800px;
        margin: 0 auto;
    }

    .detail-section {
        margin: 20px 0;
        padding: 15px;
        border-radius: 8px;
        background: rgba(255, 255, 255, 0.05);
    }
</style>

<PageTitle>My Plans</PageTitle>

<div class="plans-container">
    @if (!showDetail)
    {
        <h1>My Survival Plans</h1>
        <p><i>Select a plan to view details</i></p>
        <button @onclick="CategorizePlans">Categorize by Scenario</button>

        @if (isCategorized)
        {
            @foreach (var scenario in categorizedPlans.Keys)
            {
                <h2 style="margin-top: 20px; color: #ff4d4d;">@scenario</h2>
            <FluentGrid Columns="3">
                @foreach (var plan in categorizedPlans[scenario])
                {
                    <FluentCard Class="plan-card" @onclick="() => ShowPlanDetails(plan)">
                     <h3>@plan.PlanName</h3>
                     <p>Scenario: @plan.Scenario</p>
                     </FluentCard>
                    }

                </FluentGrid>
            }
        }
            
        else
        {


            <FluentGrid Columns="3">
                @foreach (var plan in survivalPlans ?? new List<Plan>())
                {
                    <FluentCard Class="plan-card" @onclick="() => ShowPlanDetails(plan)">
                        <h3>@plan.PlanName</h3>
                        <p>Scenario: @plan.Scenario</p>
                    </FluentCard>
                }
            </FluentGrid>
        }
    }
    else
    {
        <div id="planDetails">
            <FluentButton Appearance="Appearance.Neutral" @onclick="BackToList">
                <FluentIcon Value="@(new Microsoft.FluentUI.AspNetCore.Components.Icons.Filled.Size24.Backspace())" /> Back to Plans
            </FluentButton>

            <div class="detail-view">
                <h1 style="text-align: center; margin-bottom: 30px; color: #ff4d4d;">@selectedPlan?.PlanName</h1>
                
                <div class="detail-section">
                    <h2 style="border-bottom: 2px solid #ff4d4d; padding-bottom: 5px;">Scenario Overview</h2>
                    <p style="font-size: 1.1em; line-height: 1.6;">@selectedPlan?.Scenario</p>
                </div>

                <div class="detail-section shelter">
                    <h2>Shelter Strategy</h2>
                    <div class="resource-item">
                        <i class="resource-icon">üè†</i>
                        <p>@selectedPlan?.Shelter</p>
                    </div>
                </div>

                <div class="detail-section food">
                    <h2>Resource Planning</h2>
                    <div class="resource-item">
                        <i class="resource-icon">üç≤</i>
                        <h3>Food Sources</h3>
                        <p>@selectedPlan?.FoodSources</p>
                    </div>
                    <div class="resource-item">
                        <i class="resource-icon">üíß</i>
                        <h3>Water Sources</h3>
                        <p>@selectedPlan?.WaterSources</p>
                    </div>
                    <div class="resource-item">
                        <i class="resource-icon">üõ°Ô∏è</i>
                        <h3>Weapons</h3>
                        <p>@selectedPlan?.Weapons</p>
                    </div>
                </div>

                <div class="detail-section transport">
                    <h2>Transportation Plan</h2>
                    <div class="resource-item">
                        <i class="resource-icon">üöó</i>
                        <h3>Vehicles</h3>
                        <p>@selectedPlan?.Vehicles</p>
                    </div>
                    <div class="resource-item">
                        <i class="resource-icon">‚õΩ</i>
                        <h3>Fuel Strategy</h3>
                        <p>@selectedPlan?.Fuel</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Plan>? survivalPlans;
    private Plan? selectedPlan;
    private bool isCategorized = false;
    private Dictionary<string, List<Plan>> categorizedPlans = new();
    private bool showDetail = false;

    protected override async Task OnInitializedAsync()
    {
        survivalPlans = await PlanService.GetPlansAsync();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(userId))
        {
           
            survivalPlans = new List<Plan>();
        }
        else
        {
            survivalPlans = await PlanService.GetPlansAsync();
            survivalPlans = survivalPlans.Where(p => p.OwnerId == userId).ToList();

        }
    }

    private void ShowPlanDetails(Plan plan)
    {
        selectedPlan = plan;
        showDetail = true;
    }

    private void BackToList()
    {
        showDetail = false;
        selectedPlan = null;
    }

    private void NavigateToPlan(int planId)
    {
        NavigationManager.NavigateTo($"/edit-plan/{planId}");
    }

    private void CategorizePlans()
    {
        categorizedPlans = survivalPlans!
            .GroupBy(plan => plan.Scenario)
            .ToDictionary(group => group.Key!, group => group.ToList());

        isCategorized = true;
    }

        private class listOfPlans
    {
        public int Id { get; set; }
        public string? PlanName { get; set; }
        public string? Scenario { get; set; }
        public string? Shelter { get; set; }
        public string? FoodSources { get; set; }
        public string? WaterSources { get; set; }
        public string? Weapons { get; set; }
        public string? Vehicles { get; set; }
        public string? Fuel { get; set; }
    }
}
