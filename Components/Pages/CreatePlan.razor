@page "/create-plan"
@using ASP.Services
@inject PlanService PlanService

<PageTitle>Create Plan</PageTitle>

<h3>@buttonText</h3>

<div style="display: flex; flex-direction: column; gap: 32px; max-width: 900px; margin: auto;">

    <!-- Plan Name -->
    <FluentCard style="padding: 32px; min-height: 150px;">
        <h3>Plan Details</h3>
        <FluentTextField @bind-Value="planName" Placeholder="Enter plan name..." Label="Plan Name" />
    </FluentCard>

    <!-- Budget Input -->
    <FluentCard style="padding: 32px;">
        <h3>Set Budget</h3>
        <FluentTextField @bind-Value="budgetText" Label="Budget ($)" Placeholder="Enter your budget..." />
    </FluentCard>

    <!-- Scenario Selection -->
    <FluentCard style="padding: 32px; min-height: 300px;">
        <h3>Scenario</h3>
        <FluentCombobox TOption="string" @bind-Value="selectedScenario" Label="Scenario" class="scrollable-dropdown">
            @foreach (var option in scenarioImages.Keys)
            {
                <FluentOption Value="@option">@option</FluentOption>
            }
        </FluentCombobox>

        @if (!string.IsNullOrEmpty(scenarioImageUrl))
        {
            <img src="@scenarioImageUrl" alt="@selectedScenario" style="max-width: 100%; margin-top: 16px; border-radius: 8px;" />
        }
    </FluentCard>

    <!-- Shelter Selection -->
    <FluentCard style="padding: 32px; min-height: 300px;">
        <h3>Shelter</h3>
        <FluentCombobox TOption="string" @bind-Value="selectedShelter" Label="Shelter Type">
            @foreach (var shelter in shelterPrices.Keys)
            {
                <FluentOption Value="@shelter">@GetShelterLabel(shelter)</FluentOption>
            }
        </FluentCombobox>

        @if (!string.IsNullOrEmpty(shelterImageUrl))
        {
            <img src="@shelterImageUrl" alt="@selectedShelter" style="max-width: 100%; margin-top: 16px; border-radius: 8px;" />
        }
    </FluentCard>

    <!-- Food Sources -->
    <FluentCard style="padding: 32px;">
        <h3>Food Sources</h3>
        @for (int i = 0; i < Food.Labels.Length; i++)
        {
            var index = i;
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 8px;">
                <label style="width: 200px;">@Food.Labels[index]</label>
                <FluentNumberField TValue="int"
                                   Value="@Food.Quantities[index]"
                                   ValueChanged="@((int val) => OnQuantityChanged(val, index, Food))"
                                   Min="0" Step="1" />
                <FluentNumberField TValue="decimal"
                                   Value="@Food.Prices[index]"
                                   ValueChanged="@((decimal val) => { Food.Prices[index] = val; RecalculateTotalPrice(); })"
                                   Min="0" Step="1" />
            </div>
        }
    </FluentCard>

    <!-- Water Sources -->
    <FluentCard style="padding: 32px;">
        <h3>Water Sources</h3>
        @for (int i = 0; i < Water.Labels.Length; i++)
        {
            var index = i;
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 8px;">
                <label style="width: 200px;">@Water.Labels[index]</label>
                <FluentNumberField TValue="int"
                                   Value="@Water.Quantities[index]"
                                   ValueChanged="@((int val) => OnQuantityChanged(val, index, Water))"
                                   Min="0" Step="1" />
                <FluentNumberField TValue="decimal"
                                   Value="@Water.Prices[index]"
                                   ValueChanged="@((decimal val) => { Water.Prices[index] = val; RecalculateTotalPrice(); })"
                                   Min="0" Step="1" />
            </div>
        }
    </FluentCard>

    <!-- Weapons -->
    <FluentCard style="padding: 32px;">
        <h3>Weapons</h3>
        @for (int i = 0; i < Weapons.Labels.Length; i++)
        {
            var index = i;
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 8px;">
                <label style="width: 200px;">@Weapons.Labels[index]</label>
                <FluentNumberField TValue="int"
                                   Value="@Weapons.Quantities[index]"
                                   ValueChanged="@((int val) => OnQuantityChanged(val, index, Weapons))"
                                   Min="0" Step="1" />
                <FluentNumberField TValue="decimal"
                                   Value="@Weapons.Prices[index]"
                                   ValueChanged="@((decimal val) => { Weapons.Prices[index] = val; RecalculateTotalPrice(); })"
                                   Min="0" Step="1" />
            </div>
        }
    </FluentCard>

    <!-- Vehicles -->
    <FluentCard style="padding: 32px;">
        <h3>Vehicles</h3>
        @for (int i = 0; i < Vehicles.Labels.Length; i++)
        {
            var index = i;
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 8px;">
                <label style="width: 200px;">@Vehicles.Labels[index]</label>
                <FluentNumberField TValue="int"
                                   Value="@Vehicles.Quantities[index]"
                                   ValueChanged="@((int val) => OnQuantityChanged(val, index, Vehicles))"
                                   Min="0" Step="1" />
                <FluentNumberField TValue="decimal"
                                   Value="@Vehicles.Prices[index]"
                                   ValueChanged="@((decimal val) => { Vehicles.Prices[index] = val; RecalculateTotalPrice(); })"
                                   Min="0" Step="1" />
            </div>
        }
    </FluentCard>

    <!-- Fuel/Power -->
    <FluentCard style="padding: 32px;">
        <h3>Fuel/Power Sources</h3>
        @for (int i = 0; i < Fuel.Labels.Length; i++)
        {
            var index = i;
            <div style="display: flex; align-items: center; gap: 16px; margin-bottom: 8px;">
                <label style="width: 200px;">@Fuel.Labels[index]</label>
                <FluentNumberField TValue="int"
                                   Value="@Fuel.Quantities[index]"
                                   ValueChanged="@((int val) => OnQuantityChanged(val, index, Fuel))"
                                   Min="0" Step="1" />
                <FluentNumberField TValue="decimal"
                                   Value="@Fuel.Prices[index]"
                                   ValueChanged="@((decimal val) => { Fuel.Prices[index] = val; RecalculateTotalPrice(); })"
                                   Min="0" Step="1" />
            </div>
        }
    </FluentCard>

    <!-- Total Price & Budget Check -->
    <div style="text-align: center; margin-top: 32px;">
        <h3>Total Price: @totalPrice.ToString("C")</h3>
        @if (budgetExceeded)
        {
            <p style="color: red;">⚠️ Over budget by @overBudgetAmount.ToString("C")</p>
        }
    </div>

    <!-- Save Button -->
    @if (!budgetExceeded)
    {
        <div style="display: flex; justify-content: center; margin-top: 32px;">
            <FluentButton @onclick="SavePlan">Save Plan</FluentButton>
        </div>
    }

</div>